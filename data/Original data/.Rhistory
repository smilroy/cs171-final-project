win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,3))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
sims <- 1000
doors <- c(1:100)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,75))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
## Run game of let's make a deal
## Input: number of doors, number Monty opens
## Output: two vectors of 1 if win 0 if not; 1 vector for switching
##strategy and 1 for not switching strategy
new.game <- function(doors, open){
win.switch <- 0
win.stay <- 0
win.door <- sample(doors,1)
choice <- sample(doors,1)
if (win.door==choice){
win.stay <- 1
}
goats = sample(doors[!doors %in% c(win.door,choice)],open)
left = doors[!doors %in% c(choice,goats)]
if(length(left)==1){
win.switch <- 1
}else{
new.door = sample(left,1)
if(new.door==win.door){
win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,3))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
sims <- 1000
doors <- c(1:100)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,75))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,7))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
new.game <- function(doors, open){
win.switch <- 0
win.stay <- 0
win.door <- sample(doors,1)
choice <- sample(doors,1)
if (win.door==choice){
win.stay <- 1
}
goats = sample(doors[!doors %in% c(win.door,choice)],open)
left = doors[!doors %in% c(choice,goats)]
if(length(left)==1){
win.switch <- 1
}else{
new.door = sample(left,1)
if(new.door==win.door){
win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
##Run simulations
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,3))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
sims <- 1000
doors <- c(1:100)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,75))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
## Run game of let's make a deal
## Input: number of doors, number Monty opens
## Output: two vectors of 1 if win 0 if not; 1 vector for switching
##strategy and 1 for not switching strategy
new.game <- function(doors, open){
win.switch <- 0
win.stay <- 0
win.door <- sample(doors,1)
choice <- sample(doors,1)
if (win.door==choice){
win.stay <- 1
}
goats = sample(doors[!doors %in% c(win.door,choice)],open)
left = doors[!doors %in% c(choice,goats)]
if(length(left)==1 & win.door!=choice){
win.switch <- 1
}else{
new.door = sample(left,1)
if(new.door==win.door){
win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,7))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
############################
## Question 5.B
############################
## Run game of let's make a deal
## Input: number of doors, number Monty opens
## Output: two vectors of 1 if win 0 if not; 1 vector for switching
##strategy and 1 for not switching strategy
new.game <- function(doors, open){
win.switch <- 0
win.stay <- 0
win.door <- sample(doors,1)
choice <- sample(doors,1)
if (win.door==choice){
win.stay <- 1
}
goats = sample(doors[!doors %in% c(win.door,choice)],open)
left = doors[!doors %in% c(choice,goats)]
if(length(left)==1 & win.door!=choice){
win.switch <- 1
}else{
new.door = sample(left,1)
if(new.door==win.door){
win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
sims <- 1000
doors <- c(1:9)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,3))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
## Run game of let's make a deal
## Input: number of doors, number Monty opens
## Output: two vectors of 1 if win 0 if not; 1 vector for switching
##strategy and 1 for not switching strategy
new.game <- function(doors, open){
win.switch <- 0
win.stay <- 0
win.door <- sample(doors,1)
choice <- sample(doors,1)
if (win.door==choice){
win.stay <- 1
}
goats = sample(doors[!doors %in% c(win.door,choice)],open)
left = doors[!doors %in% c(choice,goats)]
if(length(left)==1 & win.door!=choice){
win.switch <- 1
}else{
new.door = sample(left,1)
if(new.door==win.door){
win.switch <- 1
}
}
return(c(win.switch, win.stay))
}
##Run simulations
sims <- 1000
doors <- c(1:100)
set.seed(02138)
win.switch <- replicate(sims, new.game(doors,75))
prob.win.switch <- mean(win.switch[1,])
prob.win.noswitch <- mean(win.switch[2,])
set.seed(12345)
total.bar <- data.frame(rbinom(10000, 99, 0.5))
library(ggplot2)
library(ggplot2)
set.seed(12345)
total.bar <- data.frame(rbinom(10000, 99, 0.5))
View(total.bar)
hist.sen <- ggplot(total.bar, aes(x=rbinom.10000..99..0.5.)) + geom_histogram(binwidth=1, alpha = 0.5, fill="#3399FF") + ggtitle('Histogram of number of senators in bar') + theme(plot.title = element_text(color="#333333",size=12, face="bold", vjust=1), axis.title.x = element_text(color="#333333", vjust=-0.01),                                                                                                                                               axis.title.y = element_text(color="#333333" , vjust=1), legend.title=element_blank()) + labs(x="Number of senators", y="frequency")
hist.sen
## Indicates if you would have fun in the bar
## Input: vector of number of senator in bar
## Output: TRUE if you would have fun; FALSE if you would not have fun
bar.fun <- function(senators){
return(8 < senators & senators < 60)
}
#Simulate 10000 nights and how often you have fun
set.seed(12345)
total.bar.fun <- bar.fun(rbinom(10000, 99, 0.5))
View(total.bar)
total.bar.fun
prob.bar.fun <- mean(total.bar.fun)
head(total.bar)
head(total.bar.fun)
View(total.bar)
total.bar[1]<- 9
View(total.bar)
set.seed(12345)
total.bar <- data.frame(rbinom(10000, 99, 0.5))
total.bar[1]
total.bar[1,]
total.bar[1,]<-9
total.bar[1=2,]<-60
total.bar[2,]<-60
View(total.bar)
bar.fun <- function(senators){
return(8 < senators & senators < 60)
}
prob.bar.fun <- mean(total.bar.fun)
head(total.bar)
head(total.bar.fun)
total.bar.fun <- bar.fun(total.bar)
head(total.bar.fun)
combn(3,1)
dim(combn(3,1))
## Indicates if you would have fun in the bar
## Input: vector of number of senator in bar
## Output: TRUE if you would have fun; FALSE if you would not have fun
bar.fun <- function(num_rep, max.rep){
return(sum(dbinom(9:max.rep, num_rep, 0.5)))
}
dbinom(46:54, 100, 0.5)
sum(dbinom(9:60, 99, 0.5))
binomial.pdf <- function(x, n, pi){
return(dim(combn(n,x))[2]*pi^(x)(1-pi)^(n-x))
}
binomial.pdf(4,99,0.5)
binomial.pdf <- function(x, n, pi){
return(dim(combn(n,x))[2]*pi^(x)*(1-pi)^(n-x))
}
binomial.pdf(4,99,0.5)
binomial.pdf(50,99,0.5)
pbinom(60,99,0.5)
sum(dbinom(60, num_rep, 0.5))
sum(dbinom(60, 99, 0.5))
pbinom(9:60,99,0.5)
sum(dbinom(9:60, 99, 0.5))
sum(dbinom(9, 99, 0.5))
## Indicates if you would have fun in the bar
## Input: vector of number of senator in bar
## Output: TRUE if you would have fun; FALSE if you would not have fun
bar.fun <- function(num_rep, max.rep){
return(sum(dbinom(9:max.rep, num_rep, 0.5)))
}
bar.fun(99,60)
reps <- rbinom(10000, 99, 0.5)
fun <- (8 < reps & reps < 60)
fun
mean(fun)
sum(dbinom(8:59, num_rep, 0.5))
sum(dbinom(8:59, 99, 0.5))
View(total.bar)
## Indicates if you would have fun in the bar
## Input: vector of number of senator in bar
## Output: TRUE if you would have fun; FALSE if you would not have fun
bar.fun <- function(num_rep, max.rep){
reps <- rbinom(10000, num_rep - 1, 0.5)
fun <- (8 < reps & reps < max.rep)
return(mean(fun))
}
set.seed(54321)
prob.fun <- bar.fun(435,225)
prob.fun <- NULL
num_rep = 100
max.rep = 60
for(i in 1:20){
prob <- i*5
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
bar.fun <- function(num_rep, max.rep, pi){
reps <- rbinom(10000, num_rep - 1, pi)
fun <- (8 < reps & reps < max.rep)
return(mean(fun))
}
prob.fun <- NULL
num_rep = 100
max.rep = 60
for(i in 1:20){
prob <- i*5
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
warnings()
debug(bar.fun)
for(i in 1:20){
prob <- i*5
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
prob.fun <- NULL
num_rep = 100
max.rep = 60
for(i in 1:20){
prob <- i*0.05
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
undebug(bar.fun)
prob.fun <- NULL
num_rep = 100
max.rep = 60
for(i in 1:20){
prob <- i*0.05
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
prob.fun
prob.fun <- data.frame(c(0.05,1,0.05),c(NULL))
prob.fun <- data.frame(c(0.05,1,0.05))
View(prob.fun)
num_rep = 100
max.rep = 60
bar.fun(num_rep, max.rep, 0.25)
bar.fun(num_rep, max.rep, 0.30)
reps <- rbinom(10000, num_rep - 1, pi)
reps <- rbinom(10000, num_rep - 1, 0.3)
head(reps)
fun <- (8 < reps & reps < max.rep)
mean(fun)
prob.fun <- NULL
num_rep = 100
max.rep = 60
set.seed(1776)
for(i in 1:20){
prob <- i*0.05
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
prob.fun
probs <- seq(0.05,1,0.05)
probs
probs <- seq(0.05,0.95,0.05)
probs
probs <- data.frame(seq(0.05,0.95,0.05))
View(probs)
probs <- data.frame(NULL)
probs$prob <- seq(0.05,0.95,0.05)
probs <- seq(0.05,0.95,0.05)
prob.fun <- NULL
num_rep = 100
max.rep = 60
set.seed(1776)
for(i in 1:20){
prob <- i*0.05
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
data <- data.frame(probs,prob.fun)
probs <- seq(0.05,0.95,0.05)
prob.fun <- NULL
num_rep = 100
max.rep = 60
set.seed(1776)
for(i in 1:19){
prob <- i*0.05
prob.fun[i] <- bar.fun(num_rep, max.rep, prob)
}
data <- data.frame(probs,prob.fun)
View(data)
plot(data$probs, data$prob.fun, cex=0.1, xlab="Total Cents", ylab="Total Combinations", bty="l")
plot(data$probs, data$prob.fun, cex=0.5, xlab="Total Cents", ylab="Total Combinations", bty="l")
plot(data$probs, data$prob.fun, cex=0.5, xlab="Individual probability of going to bar", ylab="Probability of having fun", bty="l")
library(foreign)
read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_COD_BY_REGION_1990_2010 2.csv")
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_COD_BY_REGION_1990_2010 2.csv")
View(data)
summary(data$cause_short)
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_COD_1990_2010_CB_0.CSV")
View(data)
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_RISK_FACTORS_BY_CAUSE_AND_REGION_SUMMARY_1990_2010_CB_Y2013M04D13.CSV")
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_RISK_FACTORS_BY_CAUSE_AND_REGION_SUMMARY_1990_2010_CB_Y2013M04D13.CSV")
View(data)
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_RISK_FACTORS_BY_EACH_CAUSE_SUMMARY_1990.CSV")
View(data)
data2 <- data[data$cause_name %in% c("HIV disease resulting in mycobacterial infection", "HIV disease resulting in other specified or unspecified diseases", "HIV/AIDS", "HIV/AIDS and tuberculosis"),]
View(data2)
summary(age_name)
summary(data2$age_name)
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2010_DISABILITY_WEIGHTS_1990_2010_0.csv")
View(data)
data <- read.csv("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21 (HIV by Age data).CSV")
View(data)
summary(data$cause_name)
data2 <- data[data$cause_name=='HIV/AIDS',]
data2 <- data2[data2$age_group_name %in% c("10 to 14", "15 to 19"),]
View(data2)
summary(data2$location_name)
View(data2)
write.table(data2, "/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/prevalence_death_HIV")
write.table(data2, "/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/prevalence_death_HIV.RData")
summary(data2$year)
histgram(data2[data$metric=="Deaths",data2$mean])
histogram(data2[data$metric=="Deaths",data2$mean])
hist(data2[data$metric=="Deaths",data2$mean])
load("~/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/prevalence_death_HIV.RData")
data <- load("~/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/prevalence_death_HIV.RData")
##Set working directory
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
##Load data
data <- read.csv("IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21.CSV")
##Subset to HIV/AIDS
data <- subset(data, cause_name=="HIV/AIDS", select = c(location_name, year, age_group_name, sex_name, cause_name, metric, mean, lower, upper))
View(data)
subset(data,data$year==1991)
subset(data,data$year==1991&data$metric=="Deaths"&data$location_name=="Global")
hist(subset(data,data$year==1991&data$metric=="Deaths"&data$location_name=="Global")$mean)
plot(subset(data,data$year==1991&data$metric=="Deaths"&data$location_name=="Global")$mean)
global <- subset(data,data$year==1991&data$metric=="Deaths"&data$location_name=="Global"&data$sex_name=="Both sexes")
plot(global$age_group_name, global$mean)
View(global)
type(global$mean)
is.numeric(global$mean)
numeric(global$mean)
as.numeric(global$mean)
plot(global$age_group_name, as.numeric(global$mean))
##Set working directory
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
##Load data
data <- read.csv("IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21.CSV")
##Subset to HIV/AIDS
data <- subset(data, cause_name=="HIV/AIDS", select = c(location_name, year, age_group_name, sex_name, cause_name, metric, mean, lower, upper))
##Write to csv
write.csv(data, "HIVAIDS_data_clean.csv")
write.xls(data, "HIVAIDS_data_clean.xls")
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(data, "HIVAIDS_data_clean.csv")
write.xlsx(data, "HIVAIDS_data_clean.xls")
View(data)
global <- subset(data,data$sex_name=="Both sexes")
write.xlsx(global, "HIVAIDS_data_clean.xls")
global <- subset(data,data$sex_name=="Both sexes"&data$year==1991)
write.xlsx(global, "HIVAIDS_data_clean.xls")
View(global)
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$year==1991&data$metric=="Prevalence")
write.xlsx(global, "HIVAIDS_data_clean.xls")
global <- subset(data,data$sex_name=="Both sexes"&data$year==1991&data$metric=="Prevalence")
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$year==1990&data$metric=="Prevalence")
View(data)
write.xlsx(global, "HIVAIDS_data_clean.xls")
table(data$year)
global <- subset(data,data$sex_name=="Both sexes"&data$year==2013&data$metric=="Prevalence")
View(global)
write.xlsx(global, "HIVAIDS_data_clean.xls")
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$year==2013&data$metric=="Deaths")
write.xlsx(global, "HIVAIDS_data_clean.xls")
View(data)
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
##Load data
data <- read.csv("IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21.CSV")
View(data)
table(data$cause_name)
table(data$location_name)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa "&data$metric=="Deaths"&(data$age_group="10 to 14"|data$age_group="15 to 19"))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa "&data$metric=="Deaths"&(data$age_group="10 to 14"||data$age_group="15 to 19"))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa "&data$metric=="Deaths"&data$age_group="10 to 14"||data$age_group="15 to 19")
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa "&data$metric=="Deaths"&data$age_group=="10 to 14"||data$age_group=="15 to 19")
View(global)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&data$age_group=="10 to 14"||data$age_group=="15 to 19")
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group=="10 to 14"||data$age_group=="15 to 19"))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths")
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&data$age_group=="10 to 14")
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&data$age_group=="10 to 14")
table(data$age_group)
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14"||data$age_group_name=="15 to 19"))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14")
)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14"||data$age_group_name=="15 to 19"))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14"))
View(global)
write.xlsx(global, "HIVAIDS_data_clean.xls")
View(global)
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
write.xlsx(global, "HIVAIDS_data_clean.xls")
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
##Load data
data <- read.csv("IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21.CSV")
##Subset to HIV/AIDS
data <- subset(data, cause_name=="HIV/AIDS", select = c(location_name, year, age_group_name, sex_name, cause_name, metric, mean, lower, upper))
##Write to csv
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14"||data$age_group_name=="15 to 19"))
write.xlsx(global, "HIVAIDS_data_clean.xls")
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="10 to 14"))
write.xlsx(global, "HIVAIDS_data_clean.xls")
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_name=="All Ages"))
write.xlsx(global, "HIVAIDS_data_clean2.xls")
table(data$age_group_nam)
View(data)
setwd("/Users/shannonmilroy/Documents/Harvard School Files/Spring 2015/Visualization/cs171-final-project/data/Original data")
data <- read.csv("IHME_GBD_2013_MDG6_1990_2013_HIV_TB_INCIDENCE_PREVALENCE_DEATHS_Y2014M11D21.CSV")
View(data)
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_id<22&data$age_group_id>8))
View(global)
write.xlsx(global, "HIVAIDS_data_clean2.xls")
data <- subset(data, cause_name=="HIV/AIDS", select = c(location_name, year, age_group_id,age_group_name, sex_name, cause_name, metric, mean, lower, upper))
global <- subset(data,data$sex_name=="Both sexes"&data$location_name=="Sub-Saharan Africa"&data$metric=="Deaths"&(data$age_group_id<22&data$age_group_id>8))
write.xlsx(global, "HIVAIDS_data_clean2.xls")
